buildscript {
    dependencies {
        classpath("com.epages:restdocs-api-spec-gradle-plugin:0.9.4")
    }
}
plugins {
    id 'com.active.aw-service' version '2.0.9'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.3'
}

ext {
    mapstructVersion = "1.3.0.Final"
    lombokVersion = "1.18.4"
}

apply plugin: 'com.epages.restdocs-api-spec'

allprojects {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-dependencies:2.1.2.RELEASE'
            mavenBom 'com.active.platform:platform-dependencies:+'
        }
    }
    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }
}

dependencies {
    implementation project(':api')

    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.7.0'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.0.1'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'

    implementation 'org.apache.cxf:cxf-rt-transports-http-hc:3.2.0'
    implementation 'org.apache.cxf:cxf-rt-frontend-jaxws:3.2.0'
    implementation 'com.sun.xml.bind:jaxb-core:2.2.11'
    implementation 'com.sun.xml.bind:jaxb-impl:2.2.11'

    //needed by oms
    implementation group: 'com.active.platform', name: 'core-services-api-migration', version: '6.0.6', ext: 'jar', configuration: 'runtime'
    implementation group: 'com.active.services', name: 'agency-management-service', classifier: 'api', version: '3.116.0.4', ext: 'jar', configuration: 'runtime'
    implementation group: 'com.active.services', name: 'foundation-user-service', classifier: 'api', version: '4.58.0.2', ext: 'jar', configuration: 'runtime'
    implementation group: 'com.active.services', name: 'order-management-service', classifier: 'api', version: '3.128.1.8', ext: 'jar', configuration: 'runtime'
    implementation 'commons-lang:commons-lang:2.6'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}"
    implementation group: 'com.googlecode.log4jdbc', name: 'log4jdbc', version: '1.2'
    implementation group: 'org.mybatis', name: 'mybatis-typehandlers-jsr310', version: '1.0.2'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}"

    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.3.RELEASE'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompile 'com.epages:restdocs-api-spec-mockmvc:0.9.4'
}

active {
    coverage {
        lineMinimum = 0.0
        branchMinimum = 0.0
    }

    library {
        includeSource = true
        //includeDoc = true
    }
}

// for API document
ext {
    snippetsDir = file('build/generated-snippets')
}

postman {
    title = 'Cart Service'
    baseUrl = '{{cart-service}}'
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
    attributes 'imagesdir': './images'
}

test {
    outputs.dir snippetsDir
}


import org.gradle.internal.os.OperatingSystem

task publishDocs(type: Exec, dependsOn: ['postman', 'asciidoctor', 'copyPostManCollection']) {
    ignoreExitValue true
    if (OperatingSystem.current().isLinux() || OperatingSystem.current().isUnix()) {
        commandLine './publishDocs.sh'
        doLast {
            logger.info("Pushing API doc status code:{}", execResult.exitValue)
        }
    } else {
        logger.error("Publishing doc task does NOT support such OS:{}", OperatingSystem.current().getName())
    }
}

task copyPostManCollection(type: Copy, dependsOn: ['postman', 'asciidoctor']) {
    from "$buildDir/api-spec"
    into "$buildDir/asciidoc/html5/api-spec"
}

// To generate and push API doc to the shared server after ciPublish
test.finalizedBy publishDocs

checkstyle {
    checkstyleTest.enabled = false
}