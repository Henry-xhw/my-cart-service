buildscript {
    dependencies {
        classpath("com.epages:restdocs-api-spec-gradle-plugin:0.9.4")
    }
}
plugins {
    id 'com.active.aw-service' version '2.0.10'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.3'
}

apply plugin: 'com.epages.restdocs-api-spec'

allprojects {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-dependencies:2.1.2.RELEASE'
            mavenBom 'com.active.platform:platform-dependencies:0.0.17'
        }
    }
    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }
}

dependencies {
    implementation project(':api')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter'
    implementation 'org.aspectj:aspectjweaver'
    implementation 'org.mybatis:mybatis-typehandlers-jsr310'
    implementation 'org.apache.commons:commons-collections4'
    implementation 'com.google.guava:guava'
    implementation 'org.apache.cxf:cxf-spring-boot-starter-jaxws'
    implementation 'org.apache.cxf:cxf-rt-features-logging'

    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
    implementation "org.mapstruct:mapstruct", "org.projectlombok:lombok"
    annotationProcessor "org.mapstruct:mapstruct-processor", "org.projectlombok:lombok"

    implementation group: 'io.github.openfeign', name: 'feign-core'
    implementation group: 'io.github.openfeign', name: 'feign-slf4j'
    implementation group: 'io.github.openfeign', name: 'feign-jackson'
    implementation group: 'io.github.openfeign', name: 'feign-okhttp'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp'
    implementation group: 'com.squareup.okio', name: 'okio'
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib'
    implementation group: 'com.active.platform', name: 'platform-lib'
    implementation group: 'com.active.springboot', name: 'active-spring-boot-starter'

    implementation group: 'com.active.services', name:'core-services-api', configuration: 'runtime-published', ext: 'jar'
    implementation group: 'com.active.services', name:'inventory-service-api'
    implementation group: 'com.active.services', name:'order-management-service', classifier: 'api', configuration: 'runtime-published', ext: 'jar'
    implementation group: 'com.active.services', name:'product-service-api'


    testAnnotationProcessor "org.mapstruct:mapstruct-processor", "org.projectlombok:lombok"
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2'
//    testImplementation group: 'org.powermock', name: 'powermock-core', version: '2.0.4'
//    testImplementation group: 'org.powermock', name: 'powermock-reflect', version: '2.0.4'

//            <dependency org="org.powermock" name="powermock-core" rev="1.6.4" conf="test->default"/>
//            <dependency org="org.powermock" name="powermock-api-mockito" rev="1.6.4" conf="test->default"/>
//            <dependency org="org.powermock" name="powermock-api-support" rev="1.6.4" conf="test->default"/>
//            <dependency org="org.powermock" name="powermock-reflect" rev="1.6.4" conf="test->default"/>
//            <dependency org="org.powermock" name="powermock-module-junit4" transitive="false" rev="1.6.4" conf="test->default"/>
//            <dependency org="org.powermock" name="powermock-module-junit4-common" rev="1.6.4" conf="test->default"/>

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompile 'com.epages:restdocs-api-spec-mockmvc'
}

active {
    coverage {
        lineMinimum = 0.0
        branchMinimum = 0.0
    }

    library {
        includeSource = true
        //includeDoc = true
    }
}

// for API document
apply from: 'gradle/restdocs.gradle'

postman {
    title = 'Cart Service'
    baseUrl = '{{cart-service}}'
}

test {
    outputs.dir snippetsDir
}

import org.gradle.internal.os.OperatingSystem

task publishDocs(type: Exec, dependsOn: ['postman', 'asciidoctor', 'copyPostManCollection']) {
    ignoreExitValue true
    if (OperatingSystem.current().isLinux() || OperatingSystem.current().isUnix()) {
        commandLine './publishDocs.sh'
        doLast {
            logger.info("Pushing API doc status code:{}", execResult.exitValue)
        }
    } else {
        logger.error("Publishing doc task does NOT support such OS:{}", OperatingSystem.current().getName())
    }
}

task copyPostManCollection(type: Copy, dependsOn: ['postman', 'asciidoctor']) {
    from "$buildDir/api-spec"
    into "$buildDir/asciidoc/html5/api-spec"
}

// To generate and push API doc to the shared server after ciPublish
test.finalizedBy publishDocs

checkstyle {
    checkstyleTest.enabled = false
}